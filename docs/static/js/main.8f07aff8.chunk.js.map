{"version":3,"sources":["Components/AddCategory.js","Helpers/getGifs.js","hooks/useFetchGifs.js","Components/GifGridItem.js","Components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","objeto","setObjeto","useEffect","then","setTimeout","GifGridItem","className","src","alt","GifGrid","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAoCeA,EAhCK,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAAkB,EAEAC,mBAAS,IAFT,mBAE7BC,EAF6B,KAEjBC,EAFiB,KAqBpC,OACI,sBAAMC,SAdW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAMP,GAAN,mBAAoBO,OAC5CN,EAAc,MAQlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAtBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCRnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDC6BLO,EAxBM,SAACf,GAAc,IAAD,EAEHd,mBAAS,CACjCqB,KAAM,GACNS,SAAS,IAJkB,mBAExBC,EAFwB,KAEhBC,EAFgB,KAqB/B,OAdAC,qBAAW,WACPpB,EAAQC,GACHoB,MAAK,SAAAV,GAEFW,YAAW,WACPH,EAAU,CACNX,KAAMG,EACNM,SAAS,MAEd,WAGZ,CAAChB,IAEGiB,GCfIK,EAVK,SAAC,GAAiB,IAAhBV,EAAe,EAAfA,MAAOV,EAAQ,EAARA,IAEzB,OACI,sBAAKqB,UAAU,wCAAf,UACI,qBAAKC,IAAKtB,EAAKuB,IAAKb,IACpB,kCAAKA,EAAL,WCyBGc,EA5BC,SAAC,GAAgB,IAAf1B,EAAc,EAAdA,SAAc,EACGe,EAAaf,GAAhCa,EADgB,EACrBN,KAAaS,EADQ,EACRA,QAKpB,OACI,qCACI,mCAAMhB,EAAN,OAEEgB,GAAW,2CAEb,qBAAKO,UAAU,YAAf,SAEQV,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aCgBtBgB,EAhCM,WAAO,IAAD,EAEezC,mBAAS,CAAE,QAF1B,mBAEfQ,EAFe,KAEHT,EAFG,KAWvB,OACI,qCAEI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQS,EAAWe,KAAK,SAAAT,GACZ,OAAO,cAAC,EAAD,CACHA,SAAUA,GADOA,Y,MCnB7C4B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8f07aff8.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst AddCategory = ({setCategories}) =>{\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //esto es para evitar que el navegador refresque todo la pagina\r\n\r\n        if (inputValue.trim().length > 1) {\r\n            setCategories(categories => [ inputValue,...categories]);\r\n            setInputValue('');\r\n        }\r\n\r\n        //inputValue.trim().length > 2 && setCategories(categories => [...categories, inputValue]);\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddCategory;\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};","\r\nexport const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=WA7mC04Iw0mVewb9OGjV0UkdpNlxzCG3`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map (img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import {useState, useEffect} from 'react';\r\nimport {getGifs} from \"../Helpers/getGifs\";\r\n\r\n//los hook no son mas que funciones, en este caso cree una carpeta para agruparlos y por convencionalidad nombro el\r\n//archivo con 'use' porque asi comienzan.\r\n\r\nconst useFetchGifs = (category) => {\r\n\r\n    const [objeto, setObjeto] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then(img => {\r\n\r\n                setTimeout(() => {\r\n                    setObjeto({\r\n                        data: img,\r\n                        loading: false\r\n                    })\r\n                }, 1500);\r\n\r\n            })\r\n    }, [category]);\r\n\r\n    return objeto;\r\n}\r\n\r\nexport default useFetchGifs;","import React from 'react';\r\n\r\nconst GifGridItem = ({title, url}) =>{\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__pulse\">\r\n            <img src={url} alt={title} />\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;","import React from 'react';\r\nimport useFetchGifs from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({category}) => {\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    //en la carpeta Helpers esta la funcion de la promesa de la api, lo unico que hace esta funcion es retornar lo que necesito\r\n    //asi no complico mas el codigo y en este componente solo tengo lo que expecificamente hace el componente\r\n\r\n    return (\r\n        <>\r\n            <h3> {category} </h3>\r\n\r\n            { loading && <p>Loading...</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default GifGrid;","import React, { useState } from 'react';\r\nimport AddCategory from \"./Components/AddCategory\";\r\nimport GifGrid from \"./Components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [ categories, setCategories ] = useState([ 'BTS']);\r\n\r\n    //const handleAdd = () => {\r\n        //setCategories([...categories, 'Exo']);\r\n       //setCategories(categories => [...categories, 'Exo']);\r\n        //Estoy usando el operador spreed para hacer una \"copia\" de array de categorias y despues agragar\r\n        //el nuevo elemento. Si no lo hago asi estaria cambiando el array por una string y rebemtaria la app\r\n  //  };\r\n\r\n    return (\r\n        <>\r\n\r\n            <h2> GifExpertApp </h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => {\r\n                        return <GifGrid key={category}\r\n                            category={category} />\r\n                    } )\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default GifExpertApp;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from \"./GifExpertApp\";\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n//const divRoot = document.querySelector('#root');\n//ReactDOM.render( GifExpertApp, divRoot );"],"sourceRoot":""}